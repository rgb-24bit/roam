:PROPERTIES:
:ID:       6C423A76-5C4B-4E0E-A402-18E58F448292
:END:
#+TITLE: rust pattern match

[[id:01CE5AAF-81ED-45AE-9667-930E9F0B04BC][Rust]] 中模式匹配是一个很常用也很强大的功能，本质上，通过 let 绑定变量也是一种模式匹配，函数参数也是一种隐式 let 绑定。

详细的语法可参考：
+ [[https://doc.rust-lang.org/book/ch18-03-pattern-syntax.html][Pattern Syntax - The Rust Programming Language]]
+ [[https://doc.rust-lang.org/stable/reference/patterns.html][Patterns - The Rust Reference]]

这里记录一下有关于 ref 模式在 2015 和 2018 下不同引发的困惑：
1. 在官方文档中，Rust 2015 不能自动推断 ref，所以会存在下面形式的代码：
   #+begin_src rust
     // Rust 2015

     let s: &Option<String> = &Some("hello".to_string());

     match s {
         &Some(ref s) => println!("s is: {}", s),
         _ => (),
     };
   #+end_src

   这里，&Some 匹配 &Option 类型，而 ref s 用于创建变量的引用。

2. 在 Rust 2018 中，则可以写成下面的形式：
   #+begin_src rust
     let s: &Option<String> = &Some("hello".to_string());

     match s {
         Some(s) => println!("s is: {}", s),
         _ => (),
     };
   #+end_src

简单来说，在 Rust 2018 中，对于 &Enum::Type(ref x) 类型的匹配，可以直接写成 Enum::Type：
#+begin_src rust
  let v1: Option<i32> = Some(3);
  match v1 {
      Some(x) => println!("{}", x),  // x is i32
      None => println!("None"),
  }

  let v2: Option<i32> = Some(3);
  match &v1 {
      Some(x) => println!("{}", x),  // x is &i32
      None => println!("None"),
  }
#+end_src

参考：
+ [[https://doc.rust-lang.org/edition-guide/rust-2018/ownership-and-lifetimes/default-match-bindings.html][Default match bindings - The Edition Guide]]
+ [[https://doc.rust-lang.org/rust-by-example/scope/borrow/ref.html][The ref pattern - Rust By Example]]

-----

找到了对应的 RFC 文件 [[https://github.com/rust-lang/rfcs/blob/master/text/2005-match-ergonomics.md][rfcs/2005-match-ergonomics.md at master · rust-lang/rfcs]]，感觉到了 Rust 的一大特点，
语法上的变化都有对应的 RFC 文件，方便你阅读 RFC 来理解这个特性。
   
在 RFC 中也称这个特性为 /default binding modes/, 允许在模式匹配中进行自动解引用，
并将值绑定到对应的 =ref= 或 =ref mut= 模式上。

#+begin_src rust
  struct Foo(i32);
     
  let foo = Foo(6);
  let foo_ref = &foo;
  // `foo_ref` is dereferenced, and `x` is bound like `ref x`.
  let Foo(x) = foo_ref;
#+end_src
   
* use in poem
  Web 框架 [[https://github.com/poem-web/poem][Poem]] 中 Path 通过泛型和模式匹配来解构 Path 参数，非常巧妙的做法：
  #+begin_src rust
    #[handler]
    async fn users_teams_show(Path((user_id, team_id)): Path<(String, String)>) {
        // ...
    }
  #+end_src

  泛型参数指定类型为 (String, String)，然后模式匹配接收两个 String 类型的值。

