:PROPERTIES:
:ID:       7ac2aceb-35e8-48ef-aef8-8f78e6833db1
:END:
#+TITLE: State machine replication

State machine replication 理论基础：
#+begin_quote
如果集群里的每一个节点上都运行着相同的确定性状态机 *S*, 并且所有的状态机刚开始都处于同样的初始状态 *s0*, 那么给予这些状态机相同的输入序列: /{i1, i2, i3, i4, i5, i6, …, in}/, 这些状态机必然会经过相同的状态转换路径: /s0->s1->s2->s3->…->sn/ 最终达到相同的状态 /sn/, 同时生成相同的输出序列 /{o1(s1), o2(s2), o3(s3), …, on(sn)}/.
#+end_quote

State machine replication 为 [[id:FADB6939-0299-4DD5-A512-639F74189DAA][Raft algorithm]] 提供安全性保障。

参考：
+ [[https://netium.gitlab.io/2018/09/12/%E7%8A%B6%E6%80%81%E6%9C%BA%E5%A4%8D%E5%88%B6-(State-Machine-Replication)/][状态机复制 (State Machine Replication) | TechX 空间]]
+ [[https://en.wikipedia.org/wiki/State_machine_replication][State machine replication - Wikipedia]]

* Fault Tolerance 容错
  State machine replication 可以通过比较不同副本间的 State 和 Output 来判断哪个副本故障了，这种情况下：
  + 容错所需的最小副本数为 3 个，一个有故障，另外两个副本还是可以得到一致的 State 和 Output。如果只有两个副本，就没办法判断谁对谁错（当然，也可以一个副本，但是也就不存在容错了）
  + 三副本最多只能支持一个故障，如果多个副本失败，则所有三个状态和输出可能不同，并且无法选择哪个是正确的。
  + 支持 F 故障的系统必须具有 2F+1 个副本

