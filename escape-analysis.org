:PROPERTIES:
:ID:       1fc8ee6a-f062-4711-bb10-4f1bd8f53d5e
:END:
#+TITLE: Escape analysis

+ Tag :: [[id:f5357bb3-d9a2-4bf9-b79c-6ee56a2432d3][Static analysis]]

「逃逸分析」是一种编译器优化技术，通过在编译中间产物（如 AST、字节码）上进行静态分析，判断出「指针」的动态作用域，从而进行如下优化：
+ 将堆分配转化为栈分配。如果某个对象在子程序中被分配，并且指向该对象的指针永远不会逃逸，该对象就可以在分配在栈上，而不是在堆上。
  在有垃圾收集的语言中，这种优化可以降低垃圾收集器运行的频率。
+ 同步消除。如果发现某个对象只能从一个线程可访问，那么在这个对象上的操作可以不需要同步。
+ 分离对象或标量替换。如果某个对象的访问方式不要求该对象是一个连续的内存结构，那么对象的部分（或全部）可以不存储在内存，而是存储在 CPU 寄存器中。

