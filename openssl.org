:PROPERTIES:
:ID:       F83873B1-E028-48E9-BECF-B8B977D084F3
:END:
#+TITLE: openssl

* X509
  使用 openssl 对 [[id:6AEEDF1F-BC2D-4D29-99E5-B68050E78994][X.509]] 证书进行操作：
  1. 查看 PEM 格式证书内容
     #+begin_example
       openssl x509 -in server.crt -text
     #+end_example
  2. 查看 DER 格式证书内容
     #+begin_example
       openssl x509 -in server.der -inform der -text
     #+end_example
  3. 获取 server 的证书，With [[id:CBDD9DA2-35FB-45E5-8A5A-925035763603][SNI]][fn:1]
     #+begin_example
       openssl s_client -servername www.example.com -connect www.example.com:443 < /dev/null
     #+end_example
  4. 获取 server 的证书，Without [[id:CBDD9DA2-35FB-45E5-8A5A-925035763603][SNI]]
     #+begin_example
       openssl s_client -connect www.example.com:443 < /dev/null
     #+end_example
  5. 转换格式，PEM -> DER，一般是 Java 需要
     #+begin_example
       openssl x509 -in cert.crt -inform PEM -outform DER -out cert.der
     #+end_example
  6. # 转换格式 PEM -> PKCS12 ，一般是 IIS 需要
     #+begin_example
       openssl pkcs12 -inkey cert.key -in cert.crt -export -out cert.pfx
     #+end_example

* RSA
  1. 生成 RSA Key 文件
     #+begin_example
       openssl genrsa -out mykey.pem 1024
     #+end_example
  2. 提取 Key 文件中的公钥
     #+begin_example
       openssl rsa -in mykey.pem -pubout > mykey.pub
       openssl rsa -in mykey.pem -pubout -out mykey.pub
       
     #+end_example
  3. 生成 ssh key 对应的公钥
     #+begin_example
       ssh-keygen -y -f key.pem > key.pub
     #+end_example

* 自签证书
  #+begin_src sh
    # Create csr conf
    cat <<EOF >> csr.conf
    [req]
    req_extensions = v3_req
    distinguished_name = req_distinguished_name
    prompt = no
    [req_distinguished_name]
    CN = ${domain}
    [ v3_req ]
    basicConstraints = CA:FALSE
    keyUsage = nonRepudiation, digitalSignature, keyEncipherment
    extendedKeyUsage = clientAuth, serverAuth
    subjectAltName = @alt_names
    [alt_names]
    DNS.1 = *.${domain}
    DNS.2 = *.sub.${domain}
    EOF
    
    # Generate the CA cert and private key
    openssl req -nodes -new -x509 -keyout ca.key -out ca.crt -subj "/CN=Self Signed CA" -days 36500
    # Generate the private key for the webhook server
    openssl genrsa -out server.key 2048
    
    # Generate a Certificate Signing Request (CSR) for the private key, and sign it with the private key of the CA.
    openssl req -new -key server.key -subj "/CN=${domain}" -config csr.conf \
      | openssl x509 -req -CA ca.crt -CAkey ca.key -CAcreateserial -out server.crt -extensions v3_req -days 36500 -extfile csr.conf
  #+end_src

* Footnotes

[fn:1] 可以用于排查证书链的问题，参考 [[https://help.aliyun.com/document_detail/212381.html][证书与密钥不匹配问题排查]]

