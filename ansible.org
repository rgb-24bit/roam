:PROPERTIES:
:ID:       527ED751-692C-40F8-B42C-C7D93B0D9DE0
:END:
#+TITLE: ansible

* Ad-Hoc
  命令格式：
  #+begin_example
    ansible [pattern] -m [module] -a "[module options]"
  #+end_example

  ansible 默认会读取位于 =/etc/ansible/hosts= 作为 inventory，也可以使用 =-i= 选项指定 inventory 文件。

  常用模块：
  #+begin_src sh
    # run shell command
    ansible all -m shell -a 'echo $TERM'
  #+end_src

  参考：[[https://docs.ansible.com/ansible/latest/user_guide/intro_adhoc.html][Introduction to ad hoc commands — Ansible Documentation]]

* Pattern
  |------------------------+------------------------------+-----------------------------------------------------|
  | Description            | Pattern(s)                   | Targets                                             |
  |------------------------+------------------------------+-----------------------------------------------------|
  | All hosts              | all (or *)                   |                                                     |
  | One host               | host1                        |                                                     |
  | Multiple hosts         | host1:host2 (or host1,host2) |                                                     |
  | One group              | webservers                   |                                                     |
  | Multiple groups        | webservers:dbservers         | all hosts in webservers plus all hosts in dbservers |
  | Excluding groups       | webservers:!atlanta          | all hosts in webservers except those in atlanta     |
  | Intersection of groups | webservers:&staging          | any hosts in webservers that are also in staging    |
  |------------------------+------------------------------+-----------------------------------------------------|

  需要有 inventory 文件才行。

* Inventory
  Ansible Inventory 就是一个 INI 格式的配置文件，通过 group 来区分不同的 host，默认分组是 all 和 ungrouped，ungrouped 指只在 all 分组下面的 host，每个分组、每个 host 可以单独配置变量。

  而 host 可以存在于不同的分组，不同分组配置的变量会按优先级合并：all group > parent group > child group > host，同级分组间的优先级按照分组名称的 ASCII 排序。

  例子：
  #+begin_src conf
    [all:vars]
    
    variable_a=1
    variable_b=1
    variable_c=1
    
    [all]
    
    192.168.0.[1:10]     # 192.168.0.1..192.168.0.10
    192.168.0.[11:20:2]  # 192.168.0.11、192.168.0.13、192.168.0.19
    
    [all:children]
    
    subgroup
    
    [subgroup:vars]
    
    variable_a=2
    
    [subgroup]
    
    192.168.0.1 variable_a=3
    192.168.0.2
  #+end_src

  上面这个例子中，对于 192.168.0.1 来说 variable_a 的值是 3，192.168.0.2 的值是 2，其他的都是 1。

  除了自定义变量外，ansible 自身也有一些变量决定怎么访问 remote host，常用的几个：
  |------------------------------+-----------------------------------------------------------------------------|
  | 变量                         | 作用                                                                        |
  |------------------------------+-----------------------------------------------------------------------------|
  | ansible_connection           | 访问远程主机的方式，值可以是 ssh、smart、paramiko，默认值是 smart，常用 ssh |
  | ansible_user                 | 访问时使用的 user                                                           |
  | ansible_password             | 访问时使用的密码                                                            |
  | ansible_ssh_private_key_file | 访问时使用的 ssh key                                                        |
  |------------------------------+-----------------------------------------------------------------------------|

  参考：[[https://docs.ansible.com/ansible/latest/user_guide/intro_inventory.html][How to build your inventory — Ansible Documentation]]

* Playbook
  在 Playbook 中，hosts 可以按照 Pattern 匹配目标 host，通常，我们可以将目标 hosts 作为变量传入：
  #+begin_example
    ansible-playbook -v -i inventory -e "hosts={pattern}" play.yaml
  #+end_example

  #+begin_src yaml
    ---
    - hosts: "{{ hosts }}"
  #+end_src

  这样，每次执行的时候可以根据 pattern 指定要在哪些 host 上执行，比如某个 ip，某个分组，等。

  play 中，还可以使用各种条件来判断是否要在当前 host 上执行，比如：
  #+begin_src yaml
    ---
    - hosts: "{{ hosts }}"
    
      tasks:
    
      - name: do something
        shell: xxxx
        when: {{ var }}
    
  #+end_src

  在 host 属于某个分组时执行：
  #+begin_src yaml
    when: inventory_hostname in groups["<group name>"]
  #+end_src

  更多的根据特性执行某个任务，可以使用 roles 功能。

