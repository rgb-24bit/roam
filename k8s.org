:PROPERTIES:
:ID:       62177F52-2A3D-4CA1-A44C-71C8B51F01EE
:ROAM_ALIASES: k8s
:END:
#+TITLE: kubernetes

kubernetes(k8s) 和我以前接触的应用，比如 MySQL、MQ、Docker 不一样，并不是一个单体的应用，而是从设计上就是一个集群式的复杂系统，或者说像官网上的介绍那样，是一个容器编排引擎。

kubernetes 内部建立在「资源」这一抽象上，「资源」的 CRUD 通过 =kube-apiserver= 完成，而「资源」的存储则由 =etcd= 完成。其中，kube-apiserver 是唯一可以读写 etcd 的组件，并提供了  =list & watch= 资源的能力。

kubernetes 各个组件便主要基于 kube-apiserver 提供 list & watch 能力进行交互，当「资源」更新了，关注这一资源的组件会收到对应的变更时间，并执行相应的操作。

比如：
+ Deployment/StatefulSet… 等 Workload 的创建到最后实际 Pod 的调度创建，控制器（Controller）创建 Pod，调度器调度 Pod，kubelet 创建 Pod，都是围绕「Pod 资源」的变更完成的
+ LoadBalancer 的实际提供者会 Watch 集群内 LoadBalancer 类型的 Service 资源，创建对应的 LB 实例，分配 IP
+ StorageClass 中指定的 provisioner 实现会 Watch 集群内的 StorageClass、PVC 资源，创建对应的 PV

一切的一切，由「资源」开始，经由 apiserver 传播。

# //www.plantuml.com/plantuml/png/POxH2W8X44NVvok6VVSNOdzbqu6MN9LnZ2BwzqfiXl15lDV3zQnLDfPsH02VZv8J9K4I7y3YScrdSblPA_6DUC6jegQ9g_v2eSN1QPeudvDmZZ_G8e2Eesl5dOQF0kWYVLfJq4_GyVxt0Ya7mduy0T4SlWgHH3lpAfplZwxKR_026F2miVKEJ2sib48xuXi0
#+HTML: <img src="https://user-images.githubusercontent.com/26481411/167984046-fccea6b9-335f-4f6c-8653-4c93e510d2d8.png">

