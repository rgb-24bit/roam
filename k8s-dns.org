:PROPERTIES:
:ID:       D23EB0B4-E18E-499A-9A9C-5DCBF2BF93D4
:END:
#+TITLE: k8s dns

* DNS Policy
  最近一个项目中遇到一个问题，k8s master 节点重启后 kube-proxy 设置 ipvs 规则还没设置好，导致 master 节点上的 apiserver 通过 svc 的 vip 调用 webhook 失败，vip 没转发到 rs。

  然后说把 svc 改成 headless 的，结果 apiserver 不干了，解析不了[fn:1]，经过一番折腾了解到了 pod dnsPolicy 配置：
  + =Default= Pod 使用从 Node 上继承过来的 resolve 配置，这个一般是没法解析 k8s 集群内的域名的
  + =ClusterFirst= Pod 使用 k8s 集群的 DNS，可以解析 k8s 集群内的域名
  + =ClusterFirstWithHostNet= 当 Pod 使用 HostNetwork 时也使用 k8s 集群的 DNS（也就是当策略为 ClusterFirst 时，Pod 使用 HostNetwork 就不会用集群 DNS）
  + =None= 忽略环境 DNS 配置，使用 dnsConfig 配置

  注：默认值是 ClusterFirst 不是 Default。

  参考：[[https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy][DNS for Services and Pods | Kubernetes]]

* DNS Record
  K8S 会为 Service 和 Pod 注册 DNS 记录，分别记录如下类型：
  + Service 注册 A/AAAA 记录和 SRV 记录
  + Pod 注册 A/AAAA 记录

  参考：[[https://kubernetes.io/zh-cn/docs/concepts/services-networking/dns-pod-service/][Service 与 Pod 的 DNS | Kubernetes]]

* Troubleshooting
  Kubelet 创建 pod 时会读取宿主机上的 DNS 配置，比如 =/etc/resolv.conf= 文件，如果文件不存在可能导致 DNS 创建失败。

  #+begin_src go
    func (m *kubeGenericRuntimeManager) generatePodSandboxConfig(pod *v1.Pod, attempt uint32) (*runtimeapi.PodSandboxConfig, error) {
      // ...
    
      dnsConfig, err := m.runtimeHelper.GetPodDNS(pod)
      if err != nil {
        return nil, err
      }
    
      // ...
    }
    
    // GetPodDNS returns DNS settings for the pod.
    func (c *Configurer) GetPodDNS(pod *v1.Pod) (*runtimeapi.DNSConfig, error) {
      dnsConfig, err := c.getHostDNSConfig()
      if err != nil {
        return nil, err
      }
    }
    
    func (c *Configurer) getHostDNSConfig() (*runtimeapi.DNSConfig, error) {
      var hostDNS, hostSearch, hostOptions []string
      // Get host DNS settings
      if c.ResolverConfig != "" {
        f, err := os.Open(c.ResolverConfig)
        if err != nil {
          return nil, err
        }
        defer f.Close()
    
        hostDNS, hostSearch, hostOptions, err = parseResolvConf(f)
        if err != nil {
          return nil, err
        }
      }
      return &runtimeapi.DNSConfig{
        Servers:  hostDNS,
        Searches: hostSearch,
        Options:  hostOptions,
      }, nil
    }
  #+end_src

* Footnotes

[fn:1] 看代码可以发现 apiserver 对应 svc 走的不是 dns 解析，而是直接获取的 svc 的 ClusterIP 字段 [[https://github.com/kubernetes/kubernetes/blob/v1.24.0/staging/src/k8s.io/apiserver/pkg/util/proxy/proxy.go#L92][ResloveCluster]]
