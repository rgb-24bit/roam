:PROPERTIES:
:ID:       586E39FB-3001-4BF1-A150-D0BC87BCE38C
:END:
#+TITLE: saltstack

saltstack 是一款自动化运维软件，主要为 C/S 架构，分为 Master 和 Minion 节点，节点间的通信通过 ZeroMQ 实现。

* Remote execution
  使用 =salt= 执行远程命令，格式为：
  #+begin_example
    salt target module.function [arguments]
  #+end_example

  比如：
  #+begin_example
    salt '*' pkg.install dnsutils
  #+end_example

  常用函数：
  |--------------------+----------------------|
  | 函数               | 作用                 |
  |--------------------+----------------------|
  | cmd.run            | 执行命令             |
  | test.ping          | 检测 Minion 运行状态 |
  | disk.usages        | 显示磁盘用量         |
  | pkg.install        | 安装一个软件包       |
  | network.interfaces | 列出网络接口         |
  |--------------------+----------------------|

  参考：
  + [[https://docs.saltproject.io/en/latest/ref/modules/all/index.html][EXECUTION MODULES]]
  + [[https://docs.saltproject.io/en/latest/topics/execution/index.html][Remote Execution]]

* Target
  可以使用 -G 选项根据机器的 grains 信息指定目标机器范围：
  #+begin_src sh
    salt -G 'os:Ubuntu' test.version
  #+end_src

  使用 -E 根据正则匹配，或使用 -L 列表匹配：
  #+begin_src sh
    salt -E 'virtmach[0-9]' test.version
    salt -L 'foo,bar,baz,quo' test.version
  #+end_src

  使用 -C 组合多个条件：
  #+begin_src sh
    salt -C 'G@os:Ubuntu and webser* or E@database.*' test.version
  #+end_src
  
* Grains
  可以通过 grains 获取底层系统的信息：
  #+begin_src sh
    # 获取所有信息
    $ salt '*' grains.items

    # 获取指定项信息
    $ salt '*' grains.item xxx
  #+end_src
  
* Debug
  执行时通过 =-l trace= 可以显示 trace 日志，方便排查执行失败的原因。
  
* master & minion
  minion 启动时会自动生成自己的密钥对（如果不存在）：
  #+begin_example
    /etc/salt/pki/minion/minion.pem
    /etc/salt/pki/minion/minion.pub
  #+end_example

  minion 启动后会将 minion.pub 发给 master，master 收到后会放到如下位置：
  #+begin_example
    /etc/salt/pki/master/minions/[minion_id]
  #+end_example

  然后 minion 会在 =/etc/salt/pki/minion/minion_master.pub= 中存放 master 的公钥，之后两边就可以开始通信了。

  也可以事先将证书复制到 master =/etc/salt/pki/master/minions/[minion_id]= 位置和 minion =/etc/salt/pki/minion= 下，这样就不用单独生成证书了，minion 启动会直接使用已有证书去通信即可。

  参考：[[https://docs.saltproject.io/en/latest/topics/tutorials/preseed_key.html][Preseed Minion with Accepted Key]]。

  如果 minion 替换了证书，那么需要在每个 master 节点上删除已有的 =/etc/salt/pki/master/minions/[minion_id]= 文件，然后重启 =salt-master= 和 =salt-minion= 让他们重新互信。


* Output
  设置输出为 json 格式：
  #+begin_example
    salt --out=json --static
  #+end_example

