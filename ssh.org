:PROPERTIES:
:ID:       91EBB4FD-23BC-4B54-98A7-CA495A5DDA2E
:END:
#+TITLE: ssh

* 目录                                                    :TOC_4_gh:noexport:
- [[#configure-ssh-key-based-authentication][Configure SSH Key-Based Authentication]]
- [[#sendenv--acceptenv][SendEnv & AcceptEnv]]
- [[#proxyjump][ProxyJump]]
- [[#端口转发][端口转发]]
  - [[#动态转发][动态转发]]
  - [[#本地转发][本地转发]]
  - [[#远程转发][远程转发]]
- [[#配置优先级][配置优先级]]
- [[#controlmaster--controlpersist][ControlMaster & ControlPersist]]
- [[#环境变量][环境变量]]

* Configure SSH Key-Based Authentication
  #+begin_example
    ssh-keygen                                     # 生成公钥和私钥
    ssh-copy-id -i <key.pub> username@remote_host  # 拷贝公钥到服务器
    cat ~/.ssh/<key.pub> | ssh username@remote_host "mkdir -p ~/.ssh && cat >> ~/.ssh/authorized_keys"  # 不使用 ssh-copy-id 的拷贝方式
  #+end_example

* SendEnv & AcceptEnv
  SSH 允许通过 SendEnv 和 AcceptEnv 在建立会话时传递客户端环境变量到服务端，支持通配符匹配。默认情况下会开启环境变量 =LANG LC_*= 的传递，偶尔会导致服务端出现编码错误的问题。

  #+begin_src conf
    # /etc/ssh/ssh_config
    SendEnv LANG LC_*
    
    # /etc/ssh/sshd_config
    AcceptEnv LANG LC_*
  #+end_src

* ProxyJump
  可以使用 ProxyJump 的功能简化 Local -> Jump Server -> Remote 登录的过程：
  #+begin_src conf
    Host jump
        IdentityFile ~/.ssh/jump_key
        User jump
        Hostname jump_host
    
    Host 172.17.*
        IdentityFile ~/.ssh/server_key
        User root
        Hostname %h
        StrictHostKeyChecking no       # 不检查 host
        UserKnownHostsFile=/dev/null   # 保存 host 到 /dev/null，也就是不保存
        ProxyJump jump
  #+end_src

* 端口转发
  端口转发中的几个角色：local - 本机、remote - 远程主机、target 要访问的目标地址。

  常常一起用的选项：
  + =-N= 不在 remote 执行远程命令，只进行端口转发
  + =-f= 让 SSH 连接在后台运行

** 动态转发
   动态转发在 local 监听一个端口，使用协议为 SOCKS，对该端口的访问都通过 SSH 连接转发到 remote，在 remote 上执行实际的访问。命令格式为：
   #+begin_example
     ssh -D local-port remote-host
   #+end_example

   数据链路：
   #+begin_example
     local -> socks -> remote -> target
   #+end_example
   
   使用：
   #+begin_example
     curl -x socks5://localhost:port http://www.example.com
   #+end_example

** 本地转发
   本地转发和动态转发类似，只不过只针对单个 target，同时不需要 SOCKS 加密通道。其在 local 监听一个端口，该端口的访问都通过 SSH 连接转发到 remote，并在 remote 上转发到 target。命令格式为：
   #+begin_example
     ssh -L local-port:target-host:target-port remote-host
   #+end_example
   
   数据链路：
   #+begin_example
     local -> remote -> target
   #+end_example

** 远程转发
   远程转发和本地转发相反，其在 remote 监听一个端口，该端口的访问都通过 SSH 连接转发到 local，并在 local 上转发到 target。命令格式为：
   #+begin_example
     ssh -R remote-port:target-host:target-port remote-host
   #+end_example

   数据链路：
   #+begin_example
     remote -> local -> target
   #+end_example

* 配置优先级
  ssh 客户端配置加载的顺序为：命令行参数 -> ~/.ssh/config -> etc/ssh/ssh_config，除了命令行参数，后面两个配置文件中的配置格式通常为：
  #+begin_src conf
    Host <pattern>
      parameter_1 value
      parameter_2 value
      parameter_3 value
      ...
  #+end_src

  而客户端在应用配置时，只会使用第一次获取到的值（也就意味着命令行优先级最高），比如下面两个配置：
  #+begin_src conf
    Host *
      ConnectTimeout 3
      ServerAliveInterval 4
      ServerAliveCountMax 5
    
    Host work
      ServerAliveCountMax 6
      ServerAliveInterval 7
  #+end_src

  那么在执行 =ssh work= 时，模式 =*= 匹配 work，因此 ServerAliveCountMax 和 ServerAliveInterval 都会使用 =*= 下面的值，
  下面的 work 配置是无用的。

  这种情况下可以将 work 部分配置上提：
  #+begin_src conf
    Host work
      ConnectTimeout 2
    
    Host *
      ConnectTimeout 3
      ServerAliveInterval 4
      ServerAliveCountMax 5
    
    Host work
      ServerAliveCountMax 6
      ServerAliveInterval 7
  #+end_src

  此时，work 的 ConnectTimeout 就会用 2 这个值了。

* ControlMaster & ControlPersist
  SSH 可以开启 ControlMaster 功能，开启后会使用 ControlPath 参数配置的路径创建 ssh 连接对应的 session 文件，这样只要这个连接还存在，再连接的时候，就不需要再输入密码了。

  同时开启 ControlPersist 可以让最后一个连接关闭之后也不真正的关掉连接，这样后面再连接的时候就还是不用输入密码。

  配置：
  #+begin_src conf
    Host *
        ControlPersist yes
        ControlMaster auto
        ControlPath /tmp/ssh-session-%r@%h:%p
  #+end_src


* 环境变量
  通过 ssh 登录目标服务器后，shell 进程并不会直接集成 sshd 进程的环境变量，sshd 会走 login 流程从配置文件中去加载配置文件，参考：
  https://github.com/openbsd/src/blob/master/usr.bin/ssh/session.c#L833

