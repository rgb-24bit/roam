:PROPERTIES:
:ID:       C1E2050A-A474-4A8A-9DFC-441E3AEDD205
:END:
#+TITLE: mysql master-slave sync

MySQL 主从复制的一般过程为：主库将更新写入 Binlog 日志后，数据更新同步到从库的中继日志（Relay log），然后从库应用 Relay log 执行更新提交。

可以根据主库是否确认更新同步到从库，确认时机将同步方式分为以下四类：
1. 异步复制（Async Replication）
   主库将更新写入 Binlog 日志文件后，不需要等待数据更新是否已经复制到从库中，就可以继续处理更多的请求。Master 将事件写入 binlog，但并不知道 Slave 是否或何时已经接收且已处理。在异步复制的机制的情况下，如果 Master 宕机，事务在 Master 上已提交，但很可能这些事务没有传到任何的 Slave 上。假设有 Master->Salve 故障转移的机制，此时 Slave 也可能会丢失事务。MySQL 复制默认是异步复制，异步复制提供了最佳性能。

2. 同步复制（Sync Replication）
   主库将更新写入 Binlog 日志文件后，需要等待数据更新已经复制到从库中，并且已经在从库执行成功，然后才能返回继续处理其它的请求。同步复制提供了最佳安全性，保证数据安全，数据不会丢失，但对性能有一定的影响。

3. 半同步复制（Semi-Sync Replication）
   主库提交更新写入二进制日志文件后，等待数据更新写入了从服务器中继日志中，然后才能再继续处理其它请求。该功能确保至少有 1 个从库接收完主库传递过来的 binlog 内容已经写入到自己的 relay log 里面了，才会通知主库上面的等待线程，该操作完毕。

4. 增强半同步复制（lossless Semi-Sync Replication、无损复制）
   增强半同步是在 MySQL 5.7 引入，其实半同步可以看成是一个过渡功能，因为默认的配置就是增强半同步，所以，大家一般说的半同步复制其实就是增强的半同步复制，也就是无损复制。
   增强半同步和半同步不同的是，等待 ACK 时间不同：
   + 半同步的问题是因为等待 ACK 的点是 Commit 之后，此时 Master 已经完成数据变更，用户已经可以看到最新数据，当 Binlog 还未同步到 Slave 时，发生主从切换，那么此时从库是没有这个最新数据的，用户看到的是老数据。
   + 增强半同步将等待 ACK 的点放在提交 Commit 之前，此时数据还未被提交，外界看不到数据变更，此时如果发送主从切换，新库依然还是老数据，不存在数据不一致的问题。

参考：[[https://www.modb.pro/db/420641][MySQL 主从复制之增强半同步（无损复制）、延迟复制和并行复制 - 墨天轮]]

* 思考
  感觉就算是增强半同步，MySQL 的同步机制也并不完善，同步可能失败，也不能确保从库的健康状态，感觉这是先天架构上的不足，那个时代分布式的架构可能还没现在这样普及。

  像 Kafka，就可以确保数据能够成功写入多个 Broker，确保多份副本的冗余。

