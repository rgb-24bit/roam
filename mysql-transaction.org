:PROPERTIES:
:ID:       DB119B80-96F8-41A7-A2CF-AE8233A8B253
:END:
#+TITLE: mysql transaction

+ Tag :: [[id:CEA916CC-2871-4D97-BC56-E8A414278E52][MySQL]]

MySQL 中并发事务在不同的隔离级别下可能存在的问题：
+ 脏读：当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。
  因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是脏数据，依据脏数据所做的操作可能是不正确的。
+ 丢失修改：指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。
  这样第一个事务内的修改结果就被丢失，因此称为丢失修改。
+ 不可重复读：指在 *一个事务* 内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，
  由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。
+ 幻读：幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，
  就好像发生了幻觉一样，所以称为幻读。

不可重复度和幻读区别：不可重复读的重点是修改，幻读的重点在于新增或者删除。

* 事务的隔离级别
  SQL 标准定义了四个隔离级别：
  + READ-UNCOMMITTED(读取未提交)：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读
  + READ-COMMITTED(读取已提交)：允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生
  + REPEATABLE-READ(可重复读)：对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生
  + SERIALIZABLE(可串行化)：最高的隔离级别，完全服从 ACID 的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读

  四个隔离级别对应的封锁协议：
  + 一级封锁协议，事务 T 在修改数据 R 之前必须先对其加 X 锁，直到事务结束才释放
  + 二级封锁协议是：一级封锁协议加上事务 T 在读取数据 R 之前必须先对其加 S 锁，读完后即可释放 S 锁
  + 三级封锁协议是：一级封锁协议加上事务 T 在读取数据 R 之前必须先对其加 S 锁，直到事务结束才释放
  + 四级封锁协议是对三级封锁协议的增强，其实现机制也最为简单，直接对事务中所 *读取* 或者 *更改* 的数据所在的表加表锁，也就是说，
    其他事务不能读写该表中的任何数据

  各自可以避免的并发问题：
  |------------------+------+------+------------+------|
  | 隔离级别         | 缩写 | 脏读 | 不可重复读 | 幻读 |
  |------------------+------+------+------------+------|
  | READ-UNCOMMITTED | RU   | Y    | Y          | Y    |
  | READ-COMMITTED   | RC   | N    | Y          | Y    |
  | REPEATABLE-READ  | RR   | N    | N          | Y    |
  | SERIALIZABLE     |      | Y    | Y          | Y    |
  |------------------+------+------+------------+------|

  MySQL InnoDB 存储引擎的默认支持的隔离级别是 REPEATABLE-READ（可重复读），利用了 MVCC 进行实现。

  参考链接：
  + [[https://github.com/Snailclimb/JavaGuide/blob/master/docs/database/%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB(%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3).md][事务隔离级别(图文详解)]]
  + [[https://www.cnblogs.com/huanongying/p/7021555.html][MySQL 的四种事务隔离级别 - 花弄影 - 博客园]]
  + [[https://blog.csdn.net/zhangzeyuaaa/article/details/46400419][数据库并发的五个问题以及四级封锁协议与事务隔离的四个级别_数据库_似水流年-CSDN博客]]

* 多版本并发控制
  在 InnoDB 中，MVCC 在 RC 和 RR 隔离级别下是借助 consistent read view（一致读视图）实现的。

  所谓 consistent read view 就是在某一时刻给事务系统 trx_sys 打 snapshot，把当时 trx_sys 状态记下来，之后的所有读操作根据其事务 ID（即 trx_id）与 snapshot 中的 trx_sys 的状态作比较，
  以此判断 read view 对于事务的可见性。
   
  其中，read view 记录的数据有：
  + ~low_limit_id~ - 创建 ~read view~ 那一刻 *活跃* 的事务列表的 *最大* 的事务 ID
  + ~up_limit_id~ - 创建 ~read view~ 那一刻活跃的事务列表的 *最小* 的事务 ID
  + ~trx_ids~ - 创建 ~read view~ 那一刻所有的活跃事务列表

  根据 ~read view~ 可以将所有事务分为三组：
  + ~trx_id < up_limit_id~ - 创建 ~read view~ 时已经提交了的事务
  + ~up_limit_id <= trx_id <= low_limit_id~ - 创建 ~read view~ 时正常执行的事务
  + ~trx_id > low_limit_id~ - 创建 ~read view~ 时还未创建的事务

  此时，我们可以根据 ~read view~ 来判断行记录的可见性：
  1. 当记录的 ~DATA_TRX_ID~ 小于 ~read vew~ 的 ~up_limit_id~ 时说明该记录在创建 ~read view~ 之前就已经提交，记录可见
  2. 如果记录的 ~DATA_TRX_ID~ 和事务创建者的 ~TRX_ID~ 一样时，记录可见
  3. 当记录的 ~DATA_TRX_ID~ 大于 ~read vew~ 的 ~up_limit_id~ 时，说明该记录在创建 ~read view~ 之后进行的新建事务修改提交的，记录不可见
  4. 如果记录对应的 ~DATA_TRX_ID~ 在 ~read view~ 的 ~trx_ids~ 里面，那么该记录也是不可见的

  其中：
  + ~RC~ 级别，每次执行 ~SELECT~ 时都会创建 read view，这就使得事务能够读取到其他事务对某一行的修改，导致不可重复读
  + ~RR~ 级别，只在事务开始之前创建 read view，实现了可重复读

  行记录的三个隐藏列：
  + DATA_ROW_ID: 如果表没有显示定义主键，则采用 MySQL 自己生成的 ROW_ID，为 48-bit，否则表示的是用户自定义的主键值
  + DATA_TRX_ID: 表示这条记录的事务 ID
  + DATA_ROLL_PTR: 指向对应的回滚段的指针

  当通过 ~read view~ 判断该行记录对于当前事务不可见时，就可以通过 ~DATA_ROLL_PTR~ 从 ~undo log~ 找到之前的数据记录，从新进行判断，
  直到数据为空或可见。
   
  参考：
  + [[https://segmentfault.com/a/1190000012650596][MySQL-InnoDB-MVCC 多版本并发控制 - 编程空间 - SegmentFault 思否]]
  + [[https://tech.youzan.com/-ci-da-liang-shan-chu-dao-zhi-mysqlman-cha-de-fen-xi/][一次大量删除导致 MySQL 慢查的分析]]
  + [[https://rgb-24bit.github.io/blog/2020/mysql-mvcc.html][MySQL MVCC - 多版本并发控制]]

  -----

  查询操作可以分为快照读 snapshot read 和当前读两类，快照读就是指直接 select 的形式，而当前读包括：
  + select ... lock in share mode
  + select ... for update
  + insert
  + update
  + delete

  快照读可以通过 MVCC 和 undo log 实现，是非阻塞的读操作，而当前读会阻塞其他事务的当前读，不会阻塞快照读。

  也就是说，select ... for update/share 都不会阻塞普通的 select 操作。

