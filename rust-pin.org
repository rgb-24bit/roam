:PROPERTIES:
:ID:       3CA36972-FCF5-4E0B-BF8E-258896AB7F20
:ROAM_REFS: https://rust-lang.github.io/async-book/04_pinning/01_chapter.html
:END:
#+TITLE: rust pin

[[id:01CE5AAF-81ED-45AE-9667-930E9F0B04BC][Rust]] 在实现 async/.await 时，可能会生成自引用结构体，自引用结构体在使用类似 std::mem::swap 的操作进行移动时，就可能出现问题：
#+begin_src rust
  #[derive(Debug)]
  struct Test {
      a: String,
      b: *const String,
  }

  fn main() {
      let mut test1 = Test::new("test1");
      test1.init();
      let mut test2 = Test::new("test2");
      test2.init();

      println!("a: {}, b: {}", test1.a(), test1.b());
      std::mem::swap(&mut test1, &mut test2);
      // The pointer to test2.b still points to the old location which is inside test1 now
      println!("a: {}, b: {}", test2.a(), test2.b());
  }
#+end_src

而这类操作通常都需要用的 &mut T，因此，Rust 引入了 Pin 类型，让 &mut T 的获取隐藏，达到保护自引用结构的目的。

