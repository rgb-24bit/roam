:PROPERTIES:
:ID:       D6B6B4B9-515D-497F-BAD5-8206CFE6D6DE
:END:
#+TITLE: I/O multiplexing

I/O 多路复用指 select/poll/epoll 这一系列的多路选择器，支持单一线程同时监听多个文件描述符（I/O 事件），阻塞等待，并在其中某个文件描述符可读写时收到通知。
是 [[id:0A7FC8FC-7DA5-40FD-8E61-897B555ABE1E][Asynchronous programming]] 中常用或者说必不可少的一种能力。

* select & poll
  :PROPERTIES:
  :ID:       A0404F38-6185-40FC-8358-92AB2BE9BA1C
  :END:
  + Ref :: [[id:D6B6B4B9-515D-497F-BAD5-8206CFE6D6DE][I/O multiplexing]]

  select 和 poll 是 linux 较早使用的 I/O 事件驱动技术，可以同时监听多个文件描述符的 I/O 事件，但也有较为明显的缺点：
  + 存在最大并发数限制，poll 解决了最大文件描述符数量限制的问题
  + 每次调用 select，都需要把 fd 集合从用户态拷贝到内核态，这个开销在 fd 很多时会很大
  + 性能衰减严重：每次 kernel 都需要线性扫描整个 fd_set，所以随着监控的描述符 fd 数量增长，其 I/O 性能会线性下降  

* epoll
  :PROPERTIES:
  :ID:       6B0198DB-E52F-491C-94AB-3C8569192A26
  :END:
  + Ref :: [[id:D6B6B4B9-515D-497F-BAD5-8206CFE6D6DE][I/O multiplexing]]

  epoll 是 [[id:EC899B0E-E274-4D41-9712-E432C287480C][Linux]] kernel 2.6 之后引入的新 I/O 事件驱动技术，select & epoll 在面对大量文件描述符的监听需求时，性能会线性下降，
  而在实际的使用场景中，存在大量的文件描述符需要监听，只有少量描述符是活跃的情况是比较常见的。

  epoll 通过一些新的设计和优化，基本上解决了 select & poll 的问题：
  #+begin_src c
    int epoll_create(int size);
    int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event);
    int epoll_wait(int epfd, struct epoll_event *events, int maxevents, int timeout);
  #+end_src

  1. epoll 利用 epoll_ctl 来插入或者删除一个 fd，实现用户态到内核态的数据拷贝，这确保了每一个 fd 在其生命周期只需要被拷贝一次，而不是每次调用 epoll_wait 的时候都拷贝一次
  2. 在实现上 epoll 采用红黑树来存储所有监听的 fd，而红黑树本身插入和删除性能比较稳定，时间复杂度 O(logN)

* io_uring
  :PROPERTIES:
  :ID:       A3A22A5B-ADE1-45E1-8519-0D5E48175810
  :END:
  + Ref :: [[id:D6B6B4B9-515D-497F-BAD5-8206CFE6D6DE][I/O multiplexing]]

  io_uring 是 Linux 内核 5.1 支持的新的异步 IO 框架，由 Block IO 大神也即 Fio 作者 Jens Axboe 开发，意在提供一套公用的网络和磁盘异步 IO。

* kqueue
  :PROPERTIES:
  :ID:       1E8E9B97-8EFD-4B2B-BC04-5DB69A7B8E22
  :END:
  + Ref :: [[id:D6B6B4B9-515D-497F-BAD5-8206CFE6D6DE][I/O multiplexing]]
    
  kqueue 是在 [[id:9C52A073-1E74-43DE-9EFC-D5C577B097E3][FreeBSD/MacOS]] 等系统中类似 [[id:6B0198DB-E52F-491C-94AB-3C8569192A26][epoll]] 的工具。

* IOCP
  :PROPERTIES:
  :ID:       5F5D43D0-1B61-429C-A7A4-FC5499922AE1
  :END:
  + Ref :: [[id:D6B6B4B9-515D-497F-BAD5-8206CFE6D6DE][I/O multiplexing]]

  IOCP 是 [[id:A0EA9036-044E-4938-859B-584C2062B333][Windows]] 系统中类似 [[id:6B0198DB-E52F-491C-94AB-3C8569192A26][epoll]] 的工具。

