:PROPERTIES:
:ID:       AE820A37-0701-4548-81A1-5C27C82BA16D
:END:
#+TITLE: go build, compiler

* Compiler Directives
  #+begin_src go
    //go:noinline  指定当前函数不要 inline
  #+end_src
  
  + [[https://pkg.go.dev/cmd/compile#hdr-Compiler_Directives][Compiler Directives]]

* Inject build-time variables
  go build 命令的 =-ldflags= 选项支持在编译时指定变量的值：
  #+begin_example
    $ go build -ldflags "-X importpath.name=value"
  #+end_example

  本质上使用的是 go link 的 =-X= 选项：
  #+begin_example
    -X importpath.name=value
      Set the value of the string variable in importpath named name to value.
      This is only effective if the variable is declared in the source code either uninitialized
      or initialized to a constant string expression. -X will not work if the initializer makes
      a function call or refers to other variables.
      Note that before Go 1.5 this option took two separate arguments.
  #+end_example

* Build constraints
  go build 命令的 =-tags= 选项可以指定若干 tag，通过在文件头加入对应注释来进行条件编译：
  #+begin_example
    -tags tag,list
            a comma-separated list of build tags to consider satisfied during the
            build. For more information about build tags, see the description of
            build constraints in the documentation for the go/build package.
            (Earlier versions of Go used a space-separated list, and that form
            is deprecated but still recognized.)
  #+end_example

  #+begin_src go
    // +build dev

    package config

    const (
      Redis = "redis://127.0.0.1:6379/0"
    )
  #+end_src

  #+begin_src go
    // +build prod

    package config

    const (
      Redis = "redis://192.168.0.1:6379"
    )
  #+end_src

  存在多个 tag 时，tag 间用空格分开表示 “或”，用逗号表示 “且”：
  #+begin_src go
    // +build ta,tb  ta && tb
    // +build ta tb  ta || tb
  #+end_src

  在 go1.18 以后将 =+build= 换成了 =//go:build=, 可以参考：
  + [[https://pkg.go.dev/cmd/go#hdr-Build_constraints][Build constraints]]

