:PROPERTIES:
:ID:       CDD2044C-2C70-4C34-A98A-6C866012275A
:END:
#+TITLE: golang generics

+ Tag :: [[id:06660642-7CC3-4116-8B42-A43EEB16137F][golang]]

#+begin_quote
+ Functions can have an additional type parameter list that uses square brackets but otherwise looks like an ordinary parameter list: func F[T any](p T) { ... }.
+ These type parameters can be used by the regular parameters and in the function body.
+ Types can also have a type parameter list: type M[T any] []T.
+ Each type parameter has a type constraint, just as each ordinary parameter has a type: func F[T Constraint](p T) { ... }.
+ Type constraints are interface types.
+ The new predeclared name any is a type constraint that permits any type.
+ Interface types used as type constraints can embed additional elements to restrict the set of type arguments that satisfy the contraint:
  + an arbitrary type T restricts to that type
  + an approximation element ~T restricts to all types whose underlying type is T
  + a union element T1 | T2 | ... restricts to any of the listed elements
+ Generic functions may only use operations supported by all the types permitted by the constraint.
+ Using a generic function or type requires passing type arguments.
+ Type inference permits omitting the type arguments of a function call in common cases.
#+end_quote

golang 选择了通过 =[]= 来标识类型参数，避免使用 =<>= 时遇到类似 [[id:43FA198D-C667-4723-8A44-67AF5D743A83][rust bastion of the turbofish]] 的问题：
#+begin_src go
  type M[T any] []T
  func F[T Constraint](p T) { ... }
#+end_src

内置 Constraint：
+ any 任意类型
+ comparable 支持 ==== 和 =!== 操作的类型

目前泛型实现存在运行时消耗，可以用来替换原有代码中使用 interface{} 的场景，不建议在算法/数据结构库中使用。

参考：[[https://go.googlesource.com/proposal/+/refs/heads/master/design/43651-type-parameters.md][Type Parameters Proposal]]

