#+TITLE: article 2022

* 目录                                                    :TOC_4_gh:noexport:
- [[#m03][M03]]
- [[#m04][M04]]
- [[#m05][M05]]
- [[#m06][M06]]
- [[#m07][M07]]
- [[#m08][M08]]

* M03
  ☞ [[http://icyfenix.cn/immutable-infrastructure/network/linux-vnet.html][Linux 网络虚拟化 | 凤凰架构]]

 这篇文章在我 Chrome Net 组中待了有一段时间了，买了本 《Kubernetes 网络权威指南》，不时对照着看，不得你说这篇文章写的真的好，从 underlay 到 overlay，一条线梳理下来能够清晰不少。

* M04
  ☞ [[https://help.aliyun.com/document_detail/412172.html][动态资源超卖]]

  1) 针对 QoS 等级为 BestEffort 的 Pod，通过统计 Node 实际资源使用率计算得到可动态超卖的资源量
  2) 这部分 Pod 本身就会被随意调度，这种设计下可以让调度更和里，同时可动态超卖的资源量是通过自定义资源来描述的，定义 Pod 时不影响 QoS 等级
  3) 就是需要自定义 Scheduler

  -----

  ☞ [[https://news.ycombinator.com/item?id=30903940][25+ years of personal knowledge management | Hacker News]]

  #+begin_quote
  - Do NOT migrate to new tools, even if they are really shiny and popular.
  - Try search instead of organisation.
  - Use fewer services, even if they are not the best tools for the job.
  #+end_quote

  之前自己的笔记就从树状的目录结构迁移到了 roam 平铺图状结构，感受：
  1) 迁移成本很高，之前的笔记太多了，不可能一次性迁移完成，目前状态还处于 copy on usage
  2) “搜索” 的体感比 “组织” 要好很多
  3) 将所有笔记放在了 roam 中，比之前分散在几个地方要舒服，不用纠结到底放在什么地方了

* M05
  ☞ [[https://www.infoq.cn/article/uiykpdhefgcdzivje9bp][Kubernetes 并发控制与数据一致性的实现原理_文化 & 方法_华为云产品与解决方案_InfoQ 精选文章]]

  1) kube-apiserver 通过基于 ResourceVersion 的乐观锁来进行并发控制，在更新请求到达时如果版本不一致就拒绝更新
  2) k8s 架构中 kube-apiserver 是唯一和 etcd 进行交互的组件，也就是说所有资源的更新都受乐观锁的控制
  3) 这对于无状态组件来说是完美的，比如 kube-scheduler、kube-controller 这些，只需要基于 kube-apiserver 完成资源更新就行
  4) 单对于有状态的组件来说，如何保证自身状态的正确是一个问题，也就是说需要确保提交到 kube-apiserver 的请求成功后才持久化自己的状态
  5) 如果绕开提交到 apiserver 这一部，可能将状态关联到错误的资源版本

  -----

  ☞ [[https://jolynch.github.io/posts/use_fast_data_algorithms/][Use Fast Data Algorithms | Joey Lynch's Site]]

  原来 hash 有加密哈希和非加密哈希的区别，加密哈希针对不可信的数据，更加防碰撞，可用于效验数据是否完整，被篡改之类，而非加密哈希速度往往更快，可用于 hashmap 这样的内部数据结构使用。

* M06
  ☞ [[https://pureage.info/2015/12/22/thundering-herd.html][accept 与 epoll 惊群 - 纯真年代]]

  之前一直在上层的系统中，没想到接近操作系统的这一层会存在这一的问题。

* M07
  ☞ [[https://www.cell-lang.net/faq.html][Why yet another programming language?]]

  1) 挺有趣的设计，专门为有状态应用设计的编程语言
  2) 现有的大部分编程语言确实更关注「计算」部分，状态通过和外部系统交互来保存

* M08
  ☞ [[https://www.morling.dev/blog/the-code-review-pyramid/][The Code Review Pyramid - Gunnar Morling]]

  1) Code Style 和 Tests 尽量通过自动化 CI/CD 来覆盖，省事同时还可以避免争论
  2) Review 将更多精力放在文档和实现和设计上

