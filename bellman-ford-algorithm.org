:PROPERTIES:
:ID:       DEE49193-B820-467F-8FB8-0B254B472921
:END:
#+TITLE: Bellman–Ford algorithm

+ Tag :: [[id:fb9ade3b-283f-40b6-8628-f9b313301b61][graph]]

Bellman–Ford 算法用于解决有向加权图的最短路径问题，和 [[id:B22B35F8-4C97-40A7-92A2-0555B1E15721][Dijkstra's algorithm]] 不同，Bellman-Ford algorithm 允许 *负权边* 的存在，算法复杂度为 O(V *E)，算法流程为：
#+begin_example
  function BellmanFord(list vertices, list edges, vertex source) is
  
      // This implementation takes in a graph, represented as
      // lists of vertices (represented as integers [0..n-1]) and edges,
      // and fills two arrays (distance and predecessor) holding
      // the shortest path from the source to each vertex
  
      distance := list of size n
      predecessor := list of size n
  
      // Step 1: initialize graph
      for each vertex v in vertices do
  
          distance[v] := inf             // Initialize the distance to all vertices to infinity
          predecessor[v] := null         // And having a null predecessor
      
      distance[source] := 0              // The distance from the source to itself is, of course, zero
  
      // Step 2: relax edges repeatedly
      
      repeat |V|−1 times:
           for each edge (u, v) with weight w in edges do
               if distance[u] + w < distance[v] then
                   distance[v] := distance[u] + w
                   predecessor[v] := u
  
      // Step 3: check for negative-weight cycles
      for each edge (u, v) with weight w in edges do
          if distance[u] + w < distance[v] then
              error "Graph contains a negative-weight cycle"
  
      return distance, predecessor
#+end_example

实现：
#+begin_src python
  # Bellman Ford Algorithm in Python
  
  
  class Graph:
  
      def __init__(self, vertices):
          self.V = vertices   # Total number of vertices in the graph
          self.graph = []     # Array of edges
  
      # Add edges
      def add_edge(self, s, d, w):
          self.graph.append([s, d, w])
  
      # Print the solution
      def print_solution(self, dist):
          print("Vertex Distance from Source")
          for i in range(self.V):
              print("{0}\t\t{1}".format(i, dist[i]))
  
      def bellman_ford(self, src):
  
          # Step 1: fill the distance array and predecessor array
          dist = [float("Inf")] * self.V
          # Mark the source vertex
          dist[src] = 0
  
          # Step 2: relax edges |V| - 1 times
          for _ in range(self.V - 1):
              for s, d, w in self.graph:
                  if dist[s] != float("Inf") and dist[s] + w < dist[d]:
                      dist[d] = dist[s] + w
  
          # Step 3: detect negative cycle
          # if value changes then we have a negative cycle in the graph
          # and we cannot find the shortest distances
          for s, d, w in self.graph:
              if dist[s] != float("Inf") and dist[s] + w < dist[d]:
                  print("Graph contains negative weight cycle")
                  return
  
          # No negative weight cycle found!
          # Print the distance and predecessor array
          self.print_solution(dist)
  
  
  g = Graph(5)
  g.add_edge(0, 1, 5)
  g.add_edge(0, 2, 4)
  g.add_edge(1, 3, 3)
  g.add_edge(2, 1, 6)
  g.add_edge(3, 2, 2)
  
  g.bellman_ford(0)
#+end_src

参考：
+ [[https://en.wikipedia.org/wiki/Bellman%E2%80%93Ford_algorithm][Bellman–Ford algorithm - Wikipedia]]
+ [[https://www.programiz.com/dsa/bellman-ford-algorithm][Bellman Ford's Algorithm]]

