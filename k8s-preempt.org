:PROPERTIES:
:ID:       D680BA0D-F5F4-46A4-9EAD-76B10B7D5537
:END:
#+TITLE: k8s preempt

抢占（Preempt）是指当 Pod 调度失败的原因是 Node 容量不够时，可以执行抢占逻辑驱逐 Node 上优先级较低的 Pod，让当前 Pod 调度上去：
#+begin_src go
  // pkg/scheduler/scheduler.go
  func (sched *Scheduler) scheduleOne() {
      ...
      suggestedHost, err := sched.schedule(pod)
      if err != nil {
          // schedule() may have failed because the pod would not fit on any host, so we try to
          // preempt, with the expectation that the next time the pod is tried for scheduling it
          // will fit due to the preemption. It is also possible that a different pod will schedule
          // into the resources that were preempted, but this is harmless.
          if fitError, ok := err.(*core.FitError); ok {
              preemptionStartTime := time.Now()
              // 执行抢占逻辑
              sched.preempt(pod, fitError)
              metrics.PreemptionAttempts.Inc()
              metrics.SchedulingAlgorithmPremptionEvaluationDuration.Observe(metrics.SinceInMicroseconds(preemptionStartTime))
              metrics.SchedulingLatency.WithLabelValues(metrics.PreemptionEvaluation).Observe(metrics.SinceInSeconds(preemptionStartTime))
          }
          return
      }
    ...
  }
#+end_src

参考：[[https://kubernetes.io/zh/docs/concepts/scheduling-eviction/pod-priority-preemption/][Pod 优先级和抢占 | Kubernetes]]

